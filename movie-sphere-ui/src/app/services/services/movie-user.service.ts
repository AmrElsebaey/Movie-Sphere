/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAllMovies } from '../fn/movie-user/get-all-movies';
import { GetAllMovies$Params } from '../fn/movie-user/get-all-movies';
import { getMovie1 } from '../fn/movie-user/get-movie-1';
import { GetMovie1$Params } from '../fn/movie-user/get-movie-1';
import { Movie } from '../models/movie';
import { PageResponseMovie } from '../models/page-response-movie';

@Injectable({ providedIn: 'root' })
export class MovieUserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllMovies()` */
  static readonly GetAllMoviesPath = '/user/movies';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMovies()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMovies$Response(params?: GetAllMovies$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseMovie>> {
    return getAllMovies(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMovies$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMovies(params?: GetAllMovies$Params, context?: HttpContext): Observable<PageResponseMovie> {
    return this.getAllMovies$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseMovie>): PageResponseMovie => r.body)
    );
  }

  /** Path part for operation `getMovie1()` */
  static readonly GetMovie1Path = '/user/movies/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMovie1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMovie1$Response(params: GetMovie1$Params, context?: HttpContext): Observable<StrictHttpResponse<Movie>> {
    return getMovie1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMovie1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMovie1(params: GetMovie1$Params, context?: HttpContext): Observable<Movie> {
    return this.getMovie1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Movie>): Movie => r.body)
    );
  }

}
