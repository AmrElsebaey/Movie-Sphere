/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addMovie } from '../fn/movie-admin/add-movie';
import { AddMovie$Params } from '../fn/movie-admin/add-movie';
import { addMovie1 } from '../fn/movie-admin/add-movie-1';
import { AddMovie1$Params } from '../fn/movie-admin/add-movie-1';
import { deleteMovie } from '../fn/movie-admin/delete-movie';
import { DeleteMovie$Params } from '../fn/movie-admin/delete-movie';
import { deleteMultipleMovies } from '../fn/movie-admin/delete-multiple-movies';
import { DeleteMultipleMovies$Params } from '../fn/movie-admin/delete-multiple-movies';
import { getMovie } from '../fn/movie-admin/get-movie';
import { GetMovie$Params } from '../fn/movie-admin/get-movie';
import { Movie } from '../models/movie';
import { PageResponseMovie } from '../models/page-response-movie';
import { searchMovies } from '../fn/movie-admin/search-movies';
import { SearchMovies$Params } from '../fn/movie-admin/search-movies';

@Injectable({ providedIn: 'root' })
export class MovieAdminService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `searchMovies()` */
  static readonly SearchMoviesPath = '/admin/movies';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchMovies()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchMovies$Response(params: SearchMovies$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseMovie>> {
    return searchMovies(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchMovies$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchMovies(params: SearchMovies$Params, context?: HttpContext): Observable<PageResponseMovie> {
    return this.searchMovies$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseMovie>): PageResponseMovie => r.body)
    );
  }

  /** Path part for operation `addMovie()` */
  static readonly AddMoviePath = '/admin/movies';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addMovie()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addMoviesBulk$Response(params: AddMovie$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Movie>>> {
    return addMovie(this.http, this.rootUrl, params, context);
  }

  addMoviesBulk(params: AddMovie$Params, context?: HttpContext): Observable<Array<Movie>> {
    return this.addMoviesBulk$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Movie>>): Array<Movie> => r.body)
    );
  }


  /** Path part for operation `deleteMultipleMovies()` */
  static readonly DeleteMultipleMoviesPath = '/admin/movies';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMultipleMovies()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deleteMultipleMovies$Response(params: DeleteMultipleMovies$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteMultipleMovies(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMultipleMovies$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deleteMultipleMovies(params: DeleteMultipleMovies$Params, context?: HttpContext): Observable<void> {
    return this.deleteMultipleMovies$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getMovie()` */
  static readonly GetMoviePath = '/admin/movies/{imdbId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMovie()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMovie$Response(params: GetMovie$Params, context?: HttpContext): Observable<StrictHttpResponse<Movie>> {
    return getMovie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMovie$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMovie(params: GetMovie$Params, context?: HttpContext): Observable<Movie> {
    return this.getMovie$Response(params, context).pipe(
      map((r: StrictHttpResponse<Movie>): Movie => r.body)
    );
  }

  /** Path part for operation `addMovie1()` */
  static readonly AddMovie1Path = '/admin/movies/{imdbId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addMovie1()` instead.
   *
   * This method doesn't expect any request body.
   */
  addMovieSingle$Response(params: AddMovie1$Params, context?: HttpContext): Observable<StrictHttpResponse<Movie>> {
    return addMovie1(this.http, this.rootUrl, params, context);
  }

  addMovieSingle(params: AddMovie1$Params, context?: HttpContext): Observable<Movie> {
    return this.addMovieSingle$Response(params, context).pipe(
      map((r: StrictHttpResponse<Movie>): Movie => r.body)
    );
  }


  /** Path part for operation `deleteMovie()` */
  static readonly DeleteMoviePath = '/admin/movies/{movieId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMovie()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMovie$Response(params: DeleteMovie$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteMovie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMovie$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMovie(params: DeleteMovie$Params, context?: HttpContext): Observable<void> {
    return this.deleteMovie$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
